[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = '''
let g:deoplete#enable_at_startup = 1
'''

[[plugins]]
repo = 'ncm2/float-preview.nvim'
if = "has('nvim-0.4')"
hook_add = '''
let g:float_preview#docked = 0
'''

[[plugins]]
repo = 'ujihisa/neco-look'

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add = '''
nmap <F12>   <plug>(lsp-declaration)
nmap <S-F12> <plug>(lsp-references)
nmap <F2>    <plug>(lsp-rename)

nmap <leader>ld <plug>(lsp-peek-declaration)
nmap <leader>lD <plug>(lsp-declaration)
nmap <leader>ln <plug>(lsp-peek-definition)
nmap <leader>lN <plug>(lsp-definition)
nmap <leader>li <plug>(lsp-peek-implementation)
nmap <leader>lI <plug>(lsp-implementation)
nmap <leader>lr <plug>(lsp-rename)
nmap <leader>lR <plug>(lsp-references)
nmap <leader>la <plug>(lsp-code-action)
nmap <leader>ld <plug>(lsp-declaration)

nmap <leader>lh <plug>(lsp-hover)
nmap <leader>ll <plug>(lsp-hover)

nmap <leader>lf <plug>(lsp-document-format)
vmap <leader>lf <plug>(lsp-range-format)

let g:lsp_log_file = '/tmp/lsp.log'
let g:lsp_signs_error   = {'text': '!'}
let g:lsp_signs_warning = {'text': '*'}
let g:lsp_signs_hint    = {'text': '-'}
let g:lsp_async_completion = 1
let g:lsp_virtual_text_enabled = 1
let g:lsp_text_edit_enabled = 0

let g:lsp_diagnostics_enabled = 1
let g:lsp_diagnostics_echo_cursor = 1

autocmd BufWritePre * call execute('LspDocumentFormatSync --server=diagnostic-languageserver')

runtime lsp_servers.vim
'''

[[plugins]]
repo = 'mattn/vim-lsp-settings'
hook_add = '''
let g:lsp_settings = {
\ 'typescript-language-server': {
\   'initialization_options': {
\     'maxTsServerMemory': 256,
\     'diagnostics': 'true',
\   },
\ }
\}
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
hook_add = '''
let g:neosnippet#disable_runtime_snippets = {
\ '_' : 1,
\}
let g:neosnippet#snippets_directory = expand('~/.nvim/snippets')

let g:neosnippet#enable_completed_snippet = 1
let g:neosnippet#enable_complete_done = 1

imap <expr> <Tab> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<Tab>"
smap <expr> <Tab> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<Tab>"
'''

[[plugins]]
repo = 'lighttiger2505/deoplete-vim-lsp'

[[plugins]]
repo = 'fszymanski/deoplete-emoji'
hook_post_source = '''
call deoplete#custom#source('emoji', 'converters', ['converter_emoji'])
'''

[[plugins]]
repo = 'blueyed/vim-auto-programming'
rev = 'neovim'

[[plugins]]
repo = 'ibuki2003/deoplete-auto-programming.nvim'
