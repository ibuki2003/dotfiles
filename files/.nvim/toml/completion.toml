[[plugins]]
repo = 'Shougo/ddc.vim'
hook_post_source = '''
call ddc#custom#patch_global('sources', [
\  'nvim-lsp',
\  'tabnine',
\  'around',
\  'look',
\  'buffer',
\  'file',
\  'treesitter',
\ ])
"\  'neosnippet',

call ddc#custom#patch_global('sourceOptions', {
\ '_': {
\   'matchers': ['matcher_fuzzy'],
\   'converters': ['converter_remove_overlap'],
\   'minAutoCompleteLength': 1,
\ },
\})

"-- Use ddc.
call ddc#enable()
'''

[[plugins]]
repo = 'Shougo/ddc-around'
hook_add = '''
call ddc#custom#patch_global('sourceOptions', { 'around': {
\ 'mark' : 'A',
\}})
call ddc#custom#patch_global('sourceParams', { 'around': {
\ 'maxSize' : 1000,
\}})
'''

[[plugins]]
repo = 'matsui54/ddc-buffer'
hook_add = '''
call ddc#custom#patch_global('sourceOptions', { 'buffer': {
\ 'mark' : 'B',
\}})
call ddc#custom#patch_global('sourceParams', { 'buffer': {
\ 'requireSameFiletype': v:false,
\ 'limitBytes': 5000000,
\ 'fromAltBuf': v:true,
\ 'forceCollect': v:true,
\ }})
'''

[[plugins]]
repo = 'octaltree/cmp-look'
hook_add = '''
call ddc#custom#patch_global('sourceOptions', { 'look': {
\  'converters': ['loud', 'matcher_head'],
\  'matchers': [],
\  'mark': 'l',
\  'isVolatile': v:true,
\ }})
call ddc#custom#patch_global('sourceParams', { 'look': {
\   'convertCase': v:true,
\   'dict': v:null,
\ }})
'''

[[plugins]]
repo = 'Shougo/ddc-matcher_head'

[[plugins]]
repo = 'matsui54/ddc-matcher_fuzzy'

[[plugins]]
repo = 'Shougo/ddc-converter_remove_overlap'

[[plugins]]
repo = 'LumaKernel/ddc-file'
hook_add = '''
call ddc#custom#patch_global('sourceOptions', { 'file': {
\ 'mark': 'F',
\ 'isVolatile': v:true,
\ 'forceCompletionPattern': '\S/\S*',
\}})
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
hook_post_source = 'lua require("nvim-treesitter")'

[[plugins]]
repo = 'delphinus/ddc-treesitter'
hook_add = '''
call ddc#custom#patch_global('sourceOptions', { 'treesitter': {
\ 'mark' : 'T',
\}})
'''

[[plugins]]
repo = 'Shougo/ddc-nvim-lsp'
hook_add = '''
call ddc#custom#patch_global('sourceOptions', { 'nvim-lsp': {
\ 'mark' : 'lsp',
\ 'forceCompletionPattern': '\.\w*|:\w*|->\w*',
\}})
'''

[[plugins]]
repo = 'neovim/nvim-lspconfig'
hook_post_source = '''
lua require('lspsettings/config')
'''

[[plugins]]
repo = 'j-hui/fidget.nvim'
hook_post_source = 'lua require"fidget".setup{}'

[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'
hook_post_source = '''
call popup_preview#enable()
'''

[[plugins]]
repo = 'ray-x/lsp_signature.nvim'
hook_post_source = '''
lua require'lsp_signature'.setup({bind=true, handler_opts={border="none"}, hint_enable=false})
hi! LspSignatureActiveParameter term=bold cterm=bold gui=bold
'''

[[plugins]]
repo = 'hrsh7th/vim-vsnip'
hook_add = '''
imap <expr> <C-l>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'
smap <expr> <C-l>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'

call ddc#custom#patch_global('sourceOptions', { 'vsnip': {
\ 'mark' : 'v',
\}})

'''

[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'

[[plugins]]
repo = 'github/copilot.vim'
hook_add = '''
let g:copilot_no_tab_map = v:true
let g:copilot_ignore_node_version = v:true
imap <silent><script><expr> <C-J> copilot#Accept("\<CR>")
'''

[[plugins]]
repo = 'LumaKernel/ddc-tabnine'
hook_add = '''
call ddc#custom#patch_global('sourceOptions', { 'tabnin': {
\ 'mark' : 'TN',
\ 'maxCandidates' : '5',
\ 'isVolatile' : v:true,
\}})
call ddc#custom#patch_global('sourceParams', { 'around': {
\ 'maxSize' : 1000,
\}})
'''


[[plugins]]
repo = 'rust-lang/rust.vim'
hook_add = '''
let g:rust_recommended_style = 0
'''
