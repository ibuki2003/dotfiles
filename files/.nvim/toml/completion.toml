[[plugins]]
repo = 'vim-denops/denops.vim'

[[plugins]]
repo = 'Shougo/ddc.vim'
hook_add = '''
call ddc#custom#patch_global('sources', [
\  'vim-lsp',
\  'around',
\  'file',
\ ])
"\  'neosnippet',

call ddc#custom#patch_global('sourceOptions', {
\ '_': {
\   'matchers': ['matcher_fuzzy'],
\   'minAutoCompleteLength': 1,
\ },
\ 'around': { 'mark' : 'A' },
\ 'vim-lsp': { 'mark' : 'lsp', 'forceCompletionPattern': '\.\w*|:\w*|->\w*' },
\ 'neosnippet': { 'mark' : 'ns', 'matchers' : ['matcher_head'] },
\ 'file': {
\   'mark': 'F',
\   'isVolatile': v:true,
\   'forceCompletionPattern': '\S/\S*',
\ },
\})

" Use Customized labels
"vim.call('ddc#custom#patch_global', 'sourceParams', {
"})

"-- Use ddc.
call ddc#enable()

" <TAB>: completion.
inoremap <silent><expr> <TAB>
\ pumvisible() ? "\<C-n>" :
\ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
\ "\<TAB>" : ddc#manual_complete()

" " <S-TAB>: completion back.
" inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<C-h>"
'''

[[plugins]]
repo = 'Shougo/ddc-around'

[[plugins]]
repo = 'Shougo/ddc-matcher_head'

[[plugins]]
repo = 'matsui54/ddc-matcher_fuzzy'

[[plugins]]
repo = 'LumaKernel/ddc-file'

[[plugins]]
repo = 'shun/ddc-vim-lsp'

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
hook_add = 'lua require("nvim-treesitter")'

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add = '''
nmap <F12>   <plug>(lsp-declaration)
nmap <S-F12> <plug>(lsp-references)
nmap <F2>    <plug>(lsp-rename)

nmap <leader>ld <plug>(lsp-peek-declaration)
nmap <leader>lD <plug>(lsp-declaration)
nmap <leader>ln <plug>(lsp-peek-definition)
nmap <leader>lN <plug>(lsp-definition)
nmap <leader>li <plug>(lsp-peek-implementation)
nmap <leader>lI <plug>(lsp-implementation)
nmap <leader>lr <plug>(lsp-rename)
nmap <leader>lR <plug>(lsp-references)
nmap <leader>la <plug>(lsp-code-action)
nmap <leader>ld <plug>(lsp-declaration)

nmap <leader>lh <plug>(lsp-hover)
nmap <leader>ll <plug>(lsp-hover)

nmap <leader>lf <plug>(lsp-document-format)
vmap <leader>lf <plug>(lsp-range-format)

let g:lsp_log_file = '/tmp/lsp.log'
let g:lsp_signs_error   = {'text': '!'}
let g:lsp_signs_warning = {'text': '*'}
let g:lsp_signs_hint    = {'text': '-'}
let g:lsp_async_completion = 1
let g:lsp_virtual_text_enabled = 1
let g:lsp_text_edit_enabled = 0

let g:lsp_diagnostics_enabled = 1
let g:lsp_diagnostics_echo_cursor = 1

autocmd BufWritePre * call execute('LspDocumentFormatSync --server=diagnostic-languageserver')

runtime lsp_servers.vim
'''

[[plugins]]
repo = 'mattn/vim-lsp-settings'
hook_add = '''
let g:lsp_settings = {
\ 'typescript-language-server': {
\   'initialization_options': {
\     'maxTsServerMemory': 256,
\     'diagnostics': 'true',
\   },
\ }
\}
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
hook_add = '''
let g:neosnippet#disable_runtime_snippets = {
\ '_' : 1,
\}
let g:neosnippet#snippets_directory = expand('~/.nvim/snippets')

let g:neosnippet#enable_completed_snippet = 1
let g:neosnippet#enable_complete_done = 1

imap <C-l>  <Plug>(neosnippet_expand_or_jump)
smap <C-l>  <Plug>(neosnippet_expand_or_jump)
xmap <C-l>  <Plug>(neosnippet_expand_target)
'''

[[plugins]]
repo = 'github/copilot.vim'
hook_add = '''
let g:copilot_no_tab_map = v:true
imap <silent><script><expr> <C-J> copilot#Accept("\<CR>")
'''

[[plugins]]
repo = 'lighttiger2505/deoplete-vim-lsp'

[[plugins]]
repo = 'fszymanski/deoplete-emoji'

[[plugins]]
repo = 'blueyed/vim-auto-programming'
rev = 'neovim'

[[plugins]]
repo = 'ibuki2003/deoplete-auto-programming.nvim'
